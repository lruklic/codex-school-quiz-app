/**
 * Javascript that handles effects for quiz HTML.
 */

$(document).ready(function(){
	
	// Add fancybox to image
    $('a.fancybox').fancybox({
    	'transitionIn'	:	'elastic',
		'transitionOut'	:	'elastic',
        'speedIn'		: 600,
        'speedOut'		: 200,
    });
    
    $("div.fancybox").fancybox({
        openEffect: 'none',
        closeEffect: 'none',
        nextEffect: 'none',
        prevEffect: 'none',
        nextSpeed: 0,
        prevSpeed: 0,
        preload: 3,
        padding: 15
    });
	
    // Enable dragging and dropping of answers on connect correct questions
    $( ".draggable" ).draggable({ 
    	cursor: "pointer", 
    	revert: false,
    });
    
    $( ".droppable" ).droppable({
    	drop: function( event, ui ) {
    		
    		var draggedAnswer = $(ui.draggable).attr("id");
    		
    		$(this).attr('answer', draggedAnswer);
    		
    		$(this).css("background-color","#6AA121");
    	},
    	out: function(event, ui) {
    		if ($(ui.draggable).attr("id") === $(this).attr('answer')) {
    			$(this).css("background-color","#fff");
        		$(this).attr('answer', null);
    		}
    	}
    });
	
    // Set up pagination using twbsPagination plugin
	var numberOfQuestions = $('#questions').children().size();
	var visiblePages = (numberOfQuestions < 5 ? 5 : numberOfQuestions);
	
	$("#pagination").twbsPagination({
		first: Messages("pagination.first"),
		prev: Messages("pagination.previous"),
		next: Messages("pagination.next"),
		last: Messages("pagination.last"),
        totalPages: numberOfQuestions,
        visiblePages: visiblePages,
        onPageClick: function (event, page) {
        	$('div[id^="question-"]').hide();
            $('#question-'+page).show();
        }
    });
	
	// List questions left/right using keyboard arrows
	$(document).keydown(function(e) {
	    switch(e.which) {
	        case 37: // left
	        	$(".prev > a").trigger("click");
	        break;
	        
	        case 39: // right
	        	$(".next > a").trigger("click");
	        break;

	        default: return; // exit this handler for other keys
	    }
	    e.preventDefault(); // prevent the default action (scroll / move caret)
	});
	
	$("#startQuizBtn").click(function() {
		$("#startQuizBtn").hide();
		$(".quiz-container").removeClass('hidden');
		$('div[id^="question-"]').hide();
		$("#question-1").show();
	});
	
	$("#finishQuizBtn").click(function() {
		createQuestionJSON();
		$(".quiz-container").hide();
		
	});
});

/**
 * Method that is called when player wants to evaluate his quiz answers. All answers are collected from HTML and are
 * dispatched in JSON for via AJAX to method mapped to /quiz/evaluate. Ajax recei ves data with results in form of HTML 
 * page generated by QuizController and that data is displayed in quiz_start HTML page.
 */
function createQuestionJSON() {
	
	var questions = [];
	
	$('#questions').children('div').each(function () {
		// Fetch data for each question for HTML
		var question = $(this);
		var questionId = question.children(".question-id").val();
		var questionType = question.children(".question-type").val();
		
		// Create JSON object
		var qsJson = new Object();
		qsJson.id = questionId;
		qsJson.answers = getAnswers(questionId, questionType);

		questions.push(qsJson);
	    // alert(qsJson.toString()); // "this" is the current element in the loop
	});

	$.ajax({
		type: "POST",
		traditional: true,
		url: "/quiz/evaluate",
		data: JSON.stringify(questions),
		contentType: 'application/json',
		success: function(data) {
			$(".result").html(data);
		}
		
	});
}

/**
 * Method that gets selected/inputed answers from HTML.
 */
function getAnswers(questionId, questionType) {
	
	switch(questionType) {
		case "MULTIPLE_CHOICE":
		case "TRUE_FALSE":
			var answer = $("input[name="+questionId+"]:checked").val();
			return answer;
		case "MULTIPLE_ANSWER":
			var answers = [];
			$("input[name="+questionId+"]:checked").each(function() {
				answers.push(this.value);
			});
			return answers;
		case "INPUT_ANSWER":
			var answer = $("input[name="+questionId+"]").val();
			return answer;
		case "CONNECT_CORRECT":
			var answers = getConnectCorrect(questionId);
			return answers;
		case "COMPOSED":
			var answers = getComposed(questionId);
			return answers;
	}
}

function getComposed(questionId) {
	
	var answerPairs = [];
	
	$("#q-"+questionId+"-composed").children().each(function() {
		if ($(this).hasClass("composed-input") ) {
			var subquestionInput = $(this).children().first();
			
			var answerPair = [];
			
			answerPair[0] = subquestionInput.attr('name');
			answerPair[1] = subquestionInput.val();
			
			answerPairs.push(answerPair);
		}
			
	});
	
	return answerPairs;
	
}

function getConnectCorrect(questionId) {
	
	var answerPairs = [];
	
	$("#q-"+questionId+"-answers>div.droppable-container>div.droppable").each(function() {
		
		var answerPair = [];
		
		answerPair[0] = $(this).attr('answer');
		answerPair[1] = $(this).attr('id');
	
		answerPairs.push(answerPair);
	});
	
	return answerPairs;
}